// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/blck-snwmn/grpc-sample/processor (interfaces: ProcessorClient,Processor_RequestNotificationClient)

// Package mock_processor is a generated GoMock package.
package mock_processor

import (
	context "context"
	processor "github.com/blck-snwmn/grpc-sample/processor"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	reflect "reflect"
)

// MockProcessorClient is a mock of ProcessorClient interface
type MockProcessorClient struct {
	ctrl     *gomock.Controller
	recorder *MockProcessorClientMockRecorder
}

// MockProcessorClientMockRecorder is the mock recorder for MockProcessorClient
type MockProcessorClientMockRecorder struct {
	mock *MockProcessorClient
}

// NewMockProcessorClient creates a new mock instance
func NewMockProcessorClient(ctrl *gomock.Controller) *MockProcessorClient {
	mock := &MockProcessorClient{ctrl: ctrl}
	mock.recorder = &MockProcessorClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProcessorClient) EXPECT() *MockProcessorClientMockRecorder {
	return m.recorder
}

// RegisterProcess mocks base method
func (m *MockProcessorClient) RegisterProcess(arg0 context.Context, arg1 *processor.Process, arg2 ...grpc.CallOption) (*processor.RegisteredMessage, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterProcess", varargs...)
	ret0, _ := ret[0].(*processor.RegisteredMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterProcess indicates an expected call of RegisterProcess
func (mr *MockProcessorClientMockRecorder) RegisterProcess(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterProcess", reflect.TypeOf((*MockProcessorClient)(nil).RegisterProcess), varargs...)
}

// RequestNotification mocks base method
func (m *MockProcessorClient) RequestNotification(arg0 context.Context, arg1 *processor.NotificationRequest, arg2 ...grpc.CallOption) (processor.Processor_RequestNotificationClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RequestNotification", varargs...)
	ret0, _ := ret[0].(processor.Processor_RequestNotificationClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestNotification indicates an expected call of RequestNotification
func (mr *MockProcessorClientMockRecorder) RequestNotification(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestNotification", reflect.TypeOf((*MockProcessorClient)(nil).RequestNotification), varargs...)
}

// MockProcessor_RequestNotificationClient is a mock of Processor_RequestNotificationClient interface
type MockProcessor_RequestNotificationClient struct {
	ctrl     *gomock.Controller
	recorder *MockProcessor_RequestNotificationClientMockRecorder
}

// MockProcessor_RequestNotificationClientMockRecorder is the mock recorder for MockProcessor_RequestNotificationClient
type MockProcessor_RequestNotificationClientMockRecorder struct {
	mock *MockProcessor_RequestNotificationClient
}

// NewMockProcessor_RequestNotificationClient creates a new mock instance
func NewMockProcessor_RequestNotificationClient(ctrl *gomock.Controller) *MockProcessor_RequestNotificationClient {
	mock := &MockProcessor_RequestNotificationClient{ctrl: ctrl}
	mock.recorder = &MockProcessor_RequestNotificationClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProcessor_RequestNotificationClient) EXPECT() *MockProcessor_RequestNotificationClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method
func (m *MockProcessor_RequestNotificationClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockProcessor_RequestNotificationClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockProcessor_RequestNotificationClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockProcessor_RequestNotificationClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockProcessor_RequestNotificationClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockProcessor_RequestNotificationClient)(nil).Context))
}

// Header mocks base method
func (m *MockProcessor_RequestNotificationClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockProcessor_RequestNotificationClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockProcessor_RequestNotificationClient)(nil).Header))
}

// Recv mocks base method
func (m *MockProcessor_RequestNotificationClient) Recv() (*processor.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*processor.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockProcessor_RequestNotificationClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockProcessor_RequestNotificationClient)(nil).Recv))
}

// RecvMsg mocks base method
func (m *MockProcessor_RequestNotificationClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockProcessor_RequestNotificationClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockProcessor_RequestNotificationClient)(nil).RecvMsg), arg0)
}

// SendMsg mocks base method
func (m *MockProcessor_RequestNotificationClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockProcessor_RequestNotificationClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockProcessor_RequestNotificationClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method
func (m *MockProcessor_RequestNotificationClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockProcessor_RequestNotificationClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockProcessor_RequestNotificationClient)(nil).Trailer))
}
